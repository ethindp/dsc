cmake_minimum_required(VERSION 3.19)
project ("DSC")
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${CMAKE_CURRENT_LIST_DIR}/cmake")
file(GLOB SRC "${CMAKE_CURRENT_LIST_DIR}/*.cpp" "${CMAKE_CURRENT_LIST_DIR}/*.c")
if(WIN32)
add_executable(main WIN32 ${SRC})
else()
add_executable(main ${SRC})
endif()
message(STATUS "Searching for SDL2")
find_package(SDL2 CONFIG REQUIRED FATAL_ERROR)
target_link_libraries(main PRIVATE SDL2::SDL2 SDL2::SDL2main)
message(STATUS "Searching for boost.chrono")
find_package(Boost COMPONENTS chrono REQUIRED)
target_INCLUDE_DIRECTORIES(main PRIVATE ${Boost_INCLUDE_DIR})
target_link_libraries(main PRIVATE ${Boost_LIBRARIES} )
if(WIN32)
message(STATUS "Building for windows, linking with Tolk")
target_link_libraries(main PRIVATE tolk.lib)
else()
message(STATUS "Building for non-windows platform, looking for speech-dispatcher")
find_package(Speechd CONFIG REQUIRED FATAL_ERROR)
target_include_directories(main PRIVATE ${SPEECHD_INCLUDE_DIR})
target_link_libraries(main PRIVATE ${SPEECHD_LIBRARIES})
endif()
if(WIN32)
target_compile_definitions(main PRIVATE NDEBUG _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING _CRT_SECURE_NO_WARNINGS _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS _UNICODE HAVE_SNPRINTF)
endif()
if(CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR CMAKE_CXX_COMPILER_ID MATCHES "AppleClang" OR CMAKE_CXX_COMPILER_ID MATCHES "GNU")
target_compile_options(main PRIVATE -Wall -Wextra -fopenmp)
elseif(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
target_compile_options(main PRIVATE /openmp /W4 /wd4100 /bigobj /MP /arch:AVX2 /fp:strict /GF /Qpar /Qspectre /Zf /utf-8)
if(CMAKE_BUILD_TYPE MATCHES "RelWithDebInfo")
target_compile_options(main PRIVATE /GS /Gs /GT /guard:cf /Zf /Zi /sdl)
endif()
endif()
message(STATUS "Searching for fmt")
find_package(fmt CONFIG REQUIRED)
target_link_libraries(main PRIVATE fmt::fmt)
message(STATUS "Searching for fretype")
find_package(Freetype REQUIRED FATAL_ERROR)
target_link_libraries(main PRIVATE Freetype::Freetype)
message(STATUS "Searching for plog")
find_path(PLOG_INCLUDE_DIRS "plog/Appenders/AndroidAppender.h")
target_include_directories(main PRIVATE ${PLOG_INCLUDE_DIRS})
message(STATUS "Searching for vulkan")
find_package(Vulkan REQUIRED FATAL_ERROR)
target_include_directories (main PRIVATE ${Vulkan_INCLUDE_DIRS})
target_link_libraries (main PRIVATE ${Vulkan_LIBRARIES})
